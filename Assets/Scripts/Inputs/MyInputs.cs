//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Scripts/Inputs/MyInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace RPG.Inputs
{
    public partial class @MyInputs: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @MyInputs()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""MyInputs"",
    ""maps"": [
        {
            ""name"": ""PlayerActions"",
            ""id"": ""74261640-8df6-4bf2-875d-05356f8c1f38"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Button"",
                    ""id"": ""dad003e2-8034-4471-9a1e-1d126f14ae47"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""moveCam"",
                    ""type"": ""Value"",
                    ""id"": ""806c3f1a-cc29-4d06-ad76-3db02c29ec4a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""mousePos"",
                    ""type"": ""Value"",
                    ""id"": ""50248898-6059-4593-b7d1-1a13c0fb8b12"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TEST_SAVE"",
                    ""type"": ""Button"",
                    ""id"": ""ab0c9073-896c-4532-a509-a1ac50e75af8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TEST_LOAD"",
                    ""type"": ""Button"",
                    ""id"": ""d2423226-377b-4a22-b86e-3e79e11cfd1b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""dc81924e-40ee-40f6-83ed-8f9c8134d7bd"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard & mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a0f92665-67dc-40b4-b4c5-cf95975cfb3e"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""moveCam"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""7ba662b4-4510-4ec7-9cc3-d63acef14083"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""moveCam"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""7454e79b-92eb-4c96-8c06-9412f877af5b"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard & mouse"",
                    ""action"": ""moveCam"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""b6b59be5-1701-46fd-8229-d9a8b1d4af15"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard & mouse"",
                    ""action"": ""moveCam"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""1cb5c640-9758-4b04-a8d5-ca74a4c4a5c4"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard & mouse"",
                    ""action"": ""moveCam"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""72694282-ad76-4fdd-aebe-cc8bed906265"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard & mouse"",
                    ""action"": ""moveCam"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""42bbb057-04c5-413a-bc26-5452521388b5"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard & mouse"",
                    ""action"": ""mousePos"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ce6659db-6b4c-40b7-9f32-5168e04e03b1"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard & mouse"",
                    ""action"": ""TEST_SAVE"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0803815b-50b4-4459-b737-8957bac6f403"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard & mouse"",
                    ""action"": ""TEST_LOAD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerActionsTheirdPerson"",
            ""id"": ""c4f2dbf5-e502-4141-b6c9-f9d7839b8693"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""cb9f7aeb-e8c6-47ba-8dfb-754af60b3f97"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""CamraMovment"",
                    ""type"": ""Value"",
                    ""id"": ""6bde3c87-c9b9-492f-8997-62bed4378c48"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""a105b7b2-87e5-41c3-83ad-e70cf4e35f67"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""fc8a9435-908b-477d-914e-422e960a61d9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BasicAttack"",
                    ""type"": ""Button"",
                    ""id"": ""0a476295-3be7-481c-8a22-69473404e35f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PauseMenu"",
                    ""type"": ""Button"",
                    ""id"": ""236acffe-66af-433d-a7b6-c0c5d2707f72"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""4a113cff-51c5-4c4b-a679-29700336f23f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""429d5669-1cdc-45a4-9dc5-dce2711341da"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GamePad"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""1f0dafbf-46b8-4f9f-bca5-320eccea01bc"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ef5ab651-e34a-4c6f-8892-1340f4130711"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard & mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""005936b0-7442-4d4f-81c5-60c04264b438"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard & mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""2f6df5fd-21c4-43c5-bf90-4a0bf3b8ceac"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard & mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""7eb0dc59-52b4-4c8d-8ee5-d1ccb6ad9af4"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard & mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""82e9f25d-4c25-4b81-bd5a-e17afc2eaef1"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": ""InvertVector2(invertX=false),StickDeadzone,ScaleVector2(x=300,y=300)"",
                    ""groups"": ""GamePad"",
                    ""action"": ""CamraMovment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0871d98f-39c2-4eb6-8834-f0b027fa2a3b"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard & mouse"",
                    ""action"": ""CamraMovment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""672a139f-ce0f-49b5-aacf-c69717d416a9"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard & mouse"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""67ae1eb5-e923-49a7-b030-0692347b5777"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GamePad"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7a76408f-e30f-4476-a923-524cb939547e"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard & mouse"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""062924eb-f4e4-4c4f-9f92-836f42e7f939"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GamePad"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""136451aa-8e2a-4846-a7ad-cb5bd7f7274d"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard & mouse"",
                    ""action"": ""BasicAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""665fe253-2ac9-4926-8b0b-85e378d8c847"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GamePad"",
                    ""action"": ""BasicAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5c6db788-5cca-4949-b0e6-4ddc59185815"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard & mouse"",
                    ""action"": ""PauseMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2b53f151-b373-46de-b556-128558fb259f"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GamePad"",
                    ""action"": ""PauseMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9d6040ea-73a5-4dcb-9992-c922f0366392"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard & mouse"",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""aba47234-0fc5-4d9e-b19f-3bd2a80acd02"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GamePad"",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KeyBoard & mouse"",
            ""bindingGroup"": ""KeyBoard & mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""GamePad"",
            ""bindingGroup"": ""GamePad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // PlayerActions
            m_PlayerActions = asset.FindActionMap("PlayerActions", throwIfNotFound: true);
            m_PlayerActions_Move = m_PlayerActions.FindAction("Move", throwIfNotFound: true);
            m_PlayerActions_moveCam = m_PlayerActions.FindAction("moveCam", throwIfNotFound: true);
            m_PlayerActions_mousePos = m_PlayerActions.FindAction("mousePos", throwIfNotFound: true);
            m_PlayerActions_TEST_SAVE = m_PlayerActions.FindAction("TEST_SAVE", throwIfNotFound: true);
            m_PlayerActions_TEST_LOAD = m_PlayerActions.FindAction("TEST_LOAD", throwIfNotFound: true);
            // PlayerActionsTheirdPerson
            m_PlayerActionsTheirdPerson = asset.FindActionMap("PlayerActionsTheirdPerson", throwIfNotFound: true);
            m_PlayerActionsTheirdPerson_Movement = m_PlayerActionsTheirdPerson.FindAction("Movement", throwIfNotFound: true);
            m_PlayerActionsTheirdPerson_CamraMovment = m_PlayerActionsTheirdPerson.FindAction("CamraMovment", throwIfNotFound: true);
            m_PlayerActionsTheirdPerson_Interact = m_PlayerActionsTheirdPerson.FindAction("Interact", throwIfNotFound: true);
            m_PlayerActionsTheirdPerson_Jump = m_PlayerActionsTheirdPerson.FindAction("Jump", throwIfNotFound: true);
            m_PlayerActionsTheirdPerson_BasicAttack = m_PlayerActionsTheirdPerson.FindAction("BasicAttack", throwIfNotFound: true);
            m_PlayerActionsTheirdPerson_PauseMenu = m_PlayerActionsTheirdPerson.FindAction("PauseMenu", throwIfNotFound: true);
            m_PlayerActionsTheirdPerson_Sprint = m_PlayerActionsTheirdPerson.FindAction("Sprint", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // PlayerActions
        private readonly InputActionMap m_PlayerActions;
        private List<IPlayerActionsActions> m_PlayerActionsActionsCallbackInterfaces = new List<IPlayerActionsActions>();
        private readonly InputAction m_PlayerActions_Move;
        private readonly InputAction m_PlayerActions_moveCam;
        private readonly InputAction m_PlayerActions_mousePos;
        private readonly InputAction m_PlayerActions_TEST_SAVE;
        private readonly InputAction m_PlayerActions_TEST_LOAD;
        public struct PlayerActionsActions
        {
            private @MyInputs m_Wrapper;
            public PlayerActionsActions(@MyInputs wrapper) { m_Wrapper = wrapper; }
            public InputAction @Move => m_Wrapper.m_PlayerActions_Move;
            public InputAction @moveCam => m_Wrapper.m_PlayerActions_moveCam;
            public InputAction @mousePos => m_Wrapper.m_PlayerActions_mousePos;
            public InputAction @TEST_SAVE => m_Wrapper.m_PlayerActions_TEST_SAVE;
            public InputAction @TEST_LOAD => m_Wrapper.m_PlayerActions_TEST_LOAD;
            public InputActionMap Get() { return m_Wrapper.m_PlayerActions; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerActionsActions set) { return set.Get(); }
            public void AddCallbacks(IPlayerActionsActions instance)
            {
                if (instance == null || m_Wrapper.m_PlayerActionsActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_PlayerActionsActionsCallbackInterfaces.Add(instance);
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @moveCam.started += instance.OnMoveCam;
                @moveCam.performed += instance.OnMoveCam;
                @moveCam.canceled += instance.OnMoveCam;
                @mousePos.started += instance.OnMousePos;
                @mousePos.performed += instance.OnMousePos;
                @mousePos.canceled += instance.OnMousePos;
                @TEST_SAVE.started += instance.OnTEST_SAVE;
                @TEST_SAVE.performed += instance.OnTEST_SAVE;
                @TEST_SAVE.canceled += instance.OnTEST_SAVE;
                @TEST_LOAD.started += instance.OnTEST_LOAD;
                @TEST_LOAD.performed += instance.OnTEST_LOAD;
                @TEST_LOAD.canceled += instance.OnTEST_LOAD;
            }

            private void UnregisterCallbacks(IPlayerActionsActions instance)
            {
                @Move.started -= instance.OnMove;
                @Move.performed -= instance.OnMove;
                @Move.canceled -= instance.OnMove;
                @moveCam.started -= instance.OnMoveCam;
                @moveCam.performed -= instance.OnMoveCam;
                @moveCam.canceled -= instance.OnMoveCam;
                @mousePos.started -= instance.OnMousePos;
                @mousePos.performed -= instance.OnMousePos;
                @mousePos.canceled -= instance.OnMousePos;
                @TEST_SAVE.started -= instance.OnTEST_SAVE;
                @TEST_SAVE.performed -= instance.OnTEST_SAVE;
                @TEST_SAVE.canceled -= instance.OnTEST_SAVE;
                @TEST_LOAD.started -= instance.OnTEST_LOAD;
                @TEST_LOAD.performed -= instance.OnTEST_LOAD;
                @TEST_LOAD.canceled -= instance.OnTEST_LOAD;
            }

            public void RemoveCallbacks(IPlayerActionsActions instance)
            {
                if (m_Wrapper.m_PlayerActionsActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IPlayerActionsActions instance)
            {
                foreach (var item in m_Wrapper.m_PlayerActionsActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_PlayerActionsActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public PlayerActionsActions @PlayerActions => new PlayerActionsActions(this);

        // PlayerActionsTheirdPerson
        private readonly InputActionMap m_PlayerActionsTheirdPerson;
        private List<IPlayerActionsTheirdPersonActions> m_PlayerActionsTheirdPersonActionsCallbackInterfaces = new List<IPlayerActionsTheirdPersonActions>();
        private readonly InputAction m_PlayerActionsTheirdPerson_Movement;
        private readonly InputAction m_PlayerActionsTheirdPerson_CamraMovment;
        private readonly InputAction m_PlayerActionsTheirdPerson_Interact;
        private readonly InputAction m_PlayerActionsTheirdPerson_Jump;
        private readonly InputAction m_PlayerActionsTheirdPerson_BasicAttack;
        private readonly InputAction m_PlayerActionsTheirdPerson_PauseMenu;
        private readonly InputAction m_PlayerActionsTheirdPerson_Sprint;
        public struct PlayerActionsTheirdPersonActions
        {
            private @MyInputs m_Wrapper;
            public PlayerActionsTheirdPersonActions(@MyInputs wrapper) { m_Wrapper = wrapper; }
            public InputAction @Movement => m_Wrapper.m_PlayerActionsTheirdPerson_Movement;
            public InputAction @CamraMovment => m_Wrapper.m_PlayerActionsTheirdPerson_CamraMovment;
            public InputAction @Interact => m_Wrapper.m_PlayerActionsTheirdPerson_Interact;
            public InputAction @Jump => m_Wrapper.m_PlayerActionsTheirdPerson_Jump;
            public InputAction @BasicAttack => m_Wrapper.m_PlayerActionsTheirdPerson_BasicAttack;
            public InputAction @PauseMenu => m_Wrapper.m_PlayerActionsTheirdPerson_PauseMenu;
            public InputAction @Sprint => m_Wrapper.m_PlayerActionsTheirdPerson_Sprint;
            public InputActionMap Get() { return m_Wrapper.m_PlayerActionsTheirdPerson; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerActionsTheirdPersonActions set) { return set.Get(); }
            public void AddCallbacks(IPlayerActionsTheirdPersonActions instance)
            {
                if (instance == null || m_Wrapper.m_PlayerActionsTheirdPersonActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_PlayerActionsTheirdPersonActionsCallbackInterfaces.Add(instance);
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @CamraMovment.started += instance.OnCamraMovment;
                @CamraMovment.performed += instance.OnCamraMovment;
                @CamraMovment.canceled += instance.OnCamraMovment;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @BasicAttack.started += instance.OnBasicAttack;
                @BasicAttack.performed += instance.OnBasicAttack;
                @BasicAttack.canceled += instance.OnBasicAttack;
                @PauseMenu.started += instance.OnPauseMenu;
                @PauseMenu.performed += instance.OnPauseMenu;
                @PauseMenu.canceled += instance.OnPauseMenu;
                @Sprint.started += instance.OnSprint;
                @Sprint.performed += instance.OnSprint;
                @Sprint.canceled += instance.OnSprint;
            }

            private void UnregisterCallbacks(IPlayerActionsTheirdPersonActions instance)
            {
                @Movement.started -= instance.OnMovement;
                @Movement.performed -= instance.OnMovement;
                @Movement.canceled -= instance.OnMovement;
                @CamraMovment.started -= instance.OnCamraMovment;
                @CamraMovment.performed -= instance.OnCamraMovment;
                @CamraMovment.canceled -= instance.OnCamraMovment;
                @Interact.started -= instance.OnInteract;
                @Interact.performed -= instance.OnInteract;
                @Interact.canceled -= instance.OnInteract;
                @Jump.started -= instance.OnJump;
                @Jump.performed -= instance.OnJump;
                @Jump.canceled -= instance.OnJump;
                @BasicAttack.started -= instance.OnBasicAttack;
                @BasicAttack.performed -= instance.OnBasicAttack;
                @BasicAttack.canceled -= instance.OnBasicAttack;
                @PauseMenu.started -= instance.OnPauseMenu;
                @PauseMenu.performed -= instance.OnPauseMenu;
                @PauseMenu.canceled -= instance.OnPauseMenu;
                @Sprint.started -= instance.OnSprint;
                @Sprint.performed -= instance.OnSprint;
                @Sprint.canceled -= instance.OnSprint;
            }

            public void RemoveCallbacks(IPlayerActionsTheirdPersonActions instance)
            {
                if (m_Wrapper.m_PlayerActionsTheirdPersonActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IPlayerActionsTheirdPersonActions instance)
            {
                foreach (var item in m_Wrapper.m_PlayerActionsTheirdPersonActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_PlayerActionsTheirdPersonActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public PlayerActionsTheirdPersonActions @PlayerActionsTheirdPerson => new PlayerActionsTheirdPersonActions(this);
        private int m_KeyBoardmouseSchemeIndex = -1;
        public InputControlScheme KeyBoardmouseScheme
        {
            get
            {
                if (m_KeyBoardmouseSchemeIndex == -1) m_KeyBoardmouseSchemeIndex = asset.FindControlSchemeIndex("KeyBoard & mouse");
                return asset.controlSchemes[m_KeyBoardmouseSchemeIndex];
            }
        }
        private int m_GamePadSchemeIndex = -1;
        public InputControlScheme GamePadScheme
        {
            get
            {
                if (m_GamePadSchemeIndex == -1) m_GamePadSchemeIndex = asset.FindControlSchemeIndex("GamePad");
                return asset.controlSchemes[m_GamePadSchemeIndex];
            }
        }
        public interface IPlayerActionsActions
        {
            void OnMove(InputAction.CallbackContext context);
            void OnMoveCam(InputAction.CallbackContext context);
            void OnMousePos(InputAction.CallbackContext context);
            void OnTEST_SAVE(InputAction.CallbackContext context);
            void OnTEST_LOAD(InputAction.CallbackContext context);
        }
        public interface IPlayerActionsTheirdPersonActions
        {
            void OnMovement(InputAction.CallbackContext context);
            void OnCamraMovment(InputAction.CallbackContext context);
            void OnInteract(InputAction.CallbackContext context);
            void OnJump(InputAction.CallbackContext context);
            void OnBasicAttack(InputAction.CallbackContext context);
            void OnPauseMenu(InputAction.CallbackContext context);
            void OnSprint(InputAction.CallbackContext context);
        }
    }
}
